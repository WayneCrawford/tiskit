****************
Channel modifications
****************

The full power of **obsinfo** is achieved using channel modifications. Unlike other equipment, OBS are subject to a lot of variations in configuration, even changes of components in the field. The aim of *obsinfo* is to have a relatively stable database of information files for instrumentation. But in actual operation it is common to reassemble the instrumentation, substituting stages and even whole components. This needs to be reflected in the metadata without compromising the stability of the instrumentation database. The way to do this is through channel modifications, which can change *any* attribute in the configuration, down to serial numbers or pole/zeros of filters at the channel level.

The attribute ``channel_modifications`` is used for this. Under this keyword the user can specify a complete hierarchy down to the filter level. Only the value(s) specified will be modified. So if a "leaf" value is changed, such as gain value, only the gain value for a particular stage will be changed. But if a complete sensor is specified, the whole component along with its stages and filters will be modified.

A channel must be identified in order to apply particular modifications to it. Channel identification is performed **not** by the channel label in the ``channels`` attribute, but by a channel code formed by the orientation and the location in the form:

.. code-block:: yaml

 "<orientation code>-<location code>"

Recall `orientation codes <Channel>`_ are defined as an FDSN standard.

For example, 

.. code-block:: yaml

 "Z-02"

If location code is omitted, a location code of "00" is assumed as default. Furthermore, it is possible to select all location codes and/or all orientation codes using the "*" notation:

==================== ==================================================   
  **Channel Code**     **Result**  
-------------------- --------------------------------------------------
    
 `"*"` or `"*-*"`      All channels
-------------------- --------------------------------------------------

    `"*-00"`           All orientations with location "00"
-------------------- --------------------------------------------------

    `"H-*"`             Channel with "orientation" H and all locations
-------------------- --------------------------------------------------

    `"H"`               Channel with "orientation" H and location "00"
-------------------- --------------------------------------------------


    `"1-01"`             Channel with orientation 1 and location "01"
==================== ==================================================

Channel codes have priorities. The more specific code will take precedence over the less specific code, 
and the orientation code specification will take precedence over the location code specification. That is
if both `"*-*"` and `"1-01"` are specified, `"1-01"` will take precedence. And if `"*-00"` and `"H-*"` 
are specified, `"*-00"` will take precedence.

The question of how to specify a particular stage arises, since stages have no name. Stages will then be referenced by their number, which, starting with zero, specifies the position of the stage within a given component (sensor, preamplifier or datalogger). Modifications to stages are specified under the keyword ``response_modifications``, as the keyword ``response_stages`` will completely overwrite all stages.

So, if we want to change the gain of a particular stage, the third one in the sensor, the hierarchy would look like this:

.. code-block:: yaml

 channel_modifications:
     sensor:
         response_modifications:
           "2": {gain: {value: 17}} 

If we, however, want to replace all of the response stages, the file would look like this:

.. code-block:: yaml

 channel_modifications:
     datalogger:
         response_stages:
            - $ref: "responses/CS5321_FIR1.stage.yaml#stage"
            - $ref: "responses/CS5322_FIR2.stage.yaml#stage"
            - $ref: "responses/CS5322_FIR2.stage.yaml#stage"
            - $ref: "responses/CS5322_FIR3.stage.yaml#stage"
                
Finally, if we want to modify a complete component, the file would look something like this:

.. code-block:: yaml

 channel_modifications:
     datalogger: {$ref: "dataloggers/LC2000.datalogger.yaml#datalogger"}

Response modifications are very flexible. THe label can be any of several regular expressions. Either the single number, as above, a list, a range or a wildcard "*", which means all:

=========================== ========================================================   
  **Stage Number**             **Result**  
--------------------------- --------------------------------------------------------
   `"*"`                       All stages
--------------------------- --------------------------------------------------------
   "[1,2,3]"                   Second, third and fourth stages (stages start at 0)
--------------------------- --------------------------------------------------------
   "[1-3]"                     Same as above
=========================== ========================================================  

Here is a complete example of a network file with channel_modifications:

.. code-block:: yaml

 ---
 format_version: "0.110"
 yaml_anchors:
    obs_clock_correction_linear_defaults: &LINEAR_CLOCK_DEFAULTS
        time_base: "Seascan MCXO, ~1e-8 nominal drift"
        reference: "GPS"
        start_sync_instrument: 0
 revision:
    authors:
        - {$ref: "authors/Wayne_Crawford.author.yaml#author"}
    date: "2019-12-19"
 network:
    facility:
        reference_name: "INSU-IPGP"
        full_name: "INSU-IPGP OBS Park"
        contact: 
           first_name: "Wayne"
           last_name: "Crawford"

        email:  "crawford@ipgp.fr"
        
        website:  "http://ipgp.fr"
         
    campaign_ref_name: "MYCAMPAIGN"
    network_info:
        $ref: "network_info/EMSO-MOMAR.network_info.yaml#network_info"
        
    stations:
        "BB_1":
            site: "My favorite site"
            start_date: "2015-04-23T10:00:00"
            end_date: "2016-05-28T15:37:00"
            location_code: "00"
            instrumentation:
                $ref: "instrumentation/BBOBS1_2012+.instrumentation.yaml#instrumentation"
            channel_modifications:
                "*-*": {datalogger_configuration: "62.5sps"}
            locations:
                "00":
                    base: {$ref: 'location_bases/BUC_DROP.location_base.yaml#location_base'}
                    position: {lon: -32.234, lat: 37.2806, elev: -1950}
            processing:
                - clock_corrections:
                    linear_drift:
                        <<: *LINEAR_CLOCK_DEFAULTS
                        start_sync_reference: "2015-04-23T11:20:00"
                        start_sync_instrument: 0
                        end_sync_reference: "2016-05-27T14:00:00.2450"
                        end_sync_instrument: "22016-05-27T14:00:00"
        "BB_2":
            notes: ["An example of changing the sensor"]
            site: "My other favorite site"
            start_date: "2015-04-23T10:00:00Z"
            end_date: "2016-05-28T15:37:00Z"
            location_code: "00"
            instrumentation:
                $ref: "instrumentation/BBOBS1_2012+.instrumentation.yaml#instrumentation" 
            channel_modifications:
               "*-*": {sensor: {equipment: {serial_number: "Sphere06"}}, datalogger_configuration: "62.5sps"}
               "H-*": 
                  sensor: 
                    equipment: {serial_number: "IP007"}
                    response_modifications:
                      "3": {gain: {value: 15}}
            locations:
                "00":
                    base: {$ref: 'location_bases/BUC_DROP.location_base.yaml#location_base'}
                    position: {lon: -32.29756, lat: 37.26049, elev: -1887}
            processing:
                - clock_correct_linear_drift:
                        <<: *LINEAR_CLOCK_DEFAULTS
                        start_sync_reference: "2015-04-22T12:24:00"
                        start_sync_instrument: 0
                        end_sync_reference: "2016-05-28T15:35:00.3660"
                        end_sync_instrument: "2016-05-28T15:35:02" 
  

